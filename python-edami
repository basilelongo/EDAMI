import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.spatial import distance
from sklearn.preprocessing import StandardScaler
#from sklearn.manifold import TSNE
from sklearn.cluster import DBSCAN


def neighbors_search(data, point, eps, metric):
    """
    Generates neighborhood graph for a point
    """
    neighbors = []
    S=0
    for i in range(data.shape[0]):
        if metric(data[point], data[i]) < eps:
            S+=1
            neighbors.append(i)
    
    return neighbors


def simple_DBSCAN(data, clust, eps, minPts, metric=distance.euclidean):
    """
    It iterates through neighbors_search for every point in data
    expands cluster for every point not determined to be noise
    """
    current_point = 0
    
    for i in range(0, data.shape[0]):
        if clust[i] != 0:
            continue
    
        neighbors = neighbors_search(data, i, eps, metric)

        if len(neighbors) < minPts:
            clust[i] = -1

        else:
            current_point += 1
            expand(data, clust, i, neighbors, current_point, eps, minPts, metric)
    
    return clust


def expand(data, clust, point, neighbors, current_point, eps, minPts, metric):
    """
    Expands cluster from a given point until neighborhood boundaries are reached
    """
    clust[point] = current_point
    
    i = 0
    while i < len(neighbors):
        
        nextPoint = neighbors[i]
        
        if clust[nextPoint] == -1:
            clust[nextPoint] = current_point
        
        elif clust[nextPoint] == 0:
            clust[nextPoint] = current_point
            
            next_neighbors = neighbors_search(data, nextPoint, eps, metric)
            
            if len(next_neighbors) >= minPts:
                neighbors = neighbors + next_neighbors
                
        i += 1


class Basic_DBSCAN:
    """
    Parameters:
    
    eps: Radius of neighborhood graph
    
    minPts: Mininmu number of neighbors required to label a given point as a core point.
    
    metric: Distance metric used to determine distance between points    
    """
    
    def __init__(self, eps, minPts, metric=distance.euclidean):
        self.eps = eps
        self.minPts = minPts
        self.metric = metric
    
    def fit_predict(self, X):
        """
        Parameters:
        
        X: An n-dimensional array of numeric vectors to be analyzed
        
        Returns:
        
        [n] cluster labels
        """
    
        clusters = [0] * X.shape[0]
        
        simple_DBSCAN(X, clusters, self.eps, self.minPts, self.metric)
        
        return clusters

df = pd.read_csv('minute_weather.csv') # ~10% of the original dataset
df = df.dropna() # dropping entries with missing values
df = df.head(1000) # taking the first 1000 entries; ~10% of the ~10%
df = df.drop(columns=['rowID', 'hpwren_timestamp', 'rain_accumulation', 'rain_duration']) # dropping unwanted columns
cols = df.columns

def checkEqual(l1, l2):
    """
    Helper to illustrate accuracy of results
    """
    return len(l1) == len(l2) and sorted(l1) == sorted(l2)

X = df[[cols[0], cols[1]]]
X = StandardScaler().fit_transform(X)

scanner = Basic_DBSCAN(eps=0.3, minPts=30)
clusters = scanner.fit_predict(X)

sk_clusters = DBSCAN(eps=0.3, min_samples=30, metric=distance.euclidean).fit(X).labels_
sk_clusters = [x+1
               if x != -1
               else x
               for x in sk_clusters]

print(f'Results are same as sk-learn: {checkEqual(clusters, sk_clusters)}')

# my clusters
sns.scatterplot(df.iloc[:, 0], df.iloc[:, 1], 
                hue=clusters, palette='bright')
plt.title('Plotted from my clusters!')
plt.show();

# sk-learn clusters
sns.scatterplot(df.iloc[:, 0], df.iloc[:, 1], 
                hue=sk_clusters, palette='bright')
plt.title('Plotted from sk-learn clusters!')
plt.show();
